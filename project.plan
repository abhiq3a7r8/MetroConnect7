/metroApp
├── app/                         # Required by Expo Router: each folder represents a route
│   ├── journey/                 # Route folder → Journey-related screens
│   ├── tickets/                 # Route folder → Ticket-related screens
│   └── alerts/                  # Route folder → Alerts/notifications screens
│
├── src/
│   ├── presentation/            # UI layer
│   │   ├── screens/             # Individual screens like Home, JourneyPlanner, TicketBooking, Alerts
│   │   ├── components/          # Reusable UI components (buttons, cards, badges, etc.)
│   │   ├── navigation/          # Stack/Tab navigators and routing logic
│   │   └── state/               # Local state management (hooks, Zustand/Redux/Jotai)
│   │
│   ├── domain/                  # Business logic / core app rules
│   │   ├── entities/            # Core models (Station, Route, Ticket, User)
│   │   ├── usecases/            # Interactors / actions (PlanJourney, GetLiveTrainStatus)
│   │   └── services/            # Framework-agnostic business rules and helpers
│   │
│   ├── data/                    # Data layer / persistence
│   │   ├── repositories/        # Implementations for API & local storage
│   │   ├── api/                 # Metro API call logic
│   │   └── storage/             # Local storage (SQLite, AsyncStorage)
│   │
│   ├── shared/                  # Common/shared resources
│   │   ├── constants/           # App-wide constants (colors, strings, config values)
│   │   ├── utils/               # Utility/helper functions
│   │   ├── styles/              # Global styling/themes
│   │   └── hooks/               # Reusable custom React hooks
│   │
│   └── core/                    # App-wide setup & providers
│       ├── config/              # API keys, environment variables, app configuration
│       └── providers/           # Context providers (theme, auth, etc.)


frontend - React Native with EXPO framework , MVVM (Model View ViewModel ) Architecture 
backend  - ExressJS with (  ) Architecture
concepts - error handling , user session , Security using JWT , state management , modular design , hooks , providers
application Security - JWT , protected routes and view , refresh token and access token 
code organization clearnup 
modularization of code , cohesion and coupling 
development build and production build 
local storage,  SQLite , keystore , secure storage async storage
local processing , edge processing , on device validation , UX speed improvment

unit and integration testing using JEST / React testing librart
End to End testing using browserstacks appium 



AGENDA : - 
    - protected routes and protected screens 
    - zap through the loading screen (optimize the app , the auth to get to dashboard in milliseconds)
    - JWT utilization 
    - how about a local SQLite database for performance improving so that 
    - testing
    - app loading performance

    - for booking page we will have a top navbar with all Lines and their respective colors 
    - choosing a line will change the app accent color 
    